// Generated by gencpp from file mpc/msgMPC_Data.msg
// DO NOT EDIT!


#ifndef MPC_MESSAGE_MSGMPC_DATA_H
#define MPC_MESSAGE_MSGMPC_DATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mpc
{
template <class ContainerAllocator>
struct msgMPC_Data_
{
  typedef msgMPC_Data_<ContainerAllocator> Type;

  msgMPC_Data_()
    : xpos(0.0)
    , ypos(0.0)
    , zpos(0.0)
    , sw(0)
    , xpos_ref(0.0)
    , ypos_ref(0.0)
    , zpos_ref(0.0)
    , xvel(0.0)
    , yvel(0.0)
    , zvel(0.0)
    , phi(0.0)
    , theta(0.0)
    , psi(0.0)
    , thrust(0.0)
    , xpos_obs(0.0)
    , ypos_obs(0.0)
    , zpos_obs(0.0)  {
    }
  msgMPC_Data_(const ContainerAllocator& _alloc)
    : xpos(0.0)
    , ypos(0.0)
    , zpos(0.0)
    , sw(0)
    , xpos_ref(0.0)
    , ypos_ref(0.0)
    , zpos_ref(0.0)
    , xvel(0.0)
    , yvel(0.0)
    , zvel(0.0)
    , phi(0.0)
    , theta(0.0)
    , psi(0.0)
    , thrust(0.0)
    , xpos_obs(0.0)
    , ypos_obs(0.0)
    , zpos_obs(0.0)  {
    }



   typedef double _xpos_type;
  _xpos_type xpos;

   typedef double _ypos_type;
  _ypos_type ypos;

   typedef double _zpos_type;
  _zpos_type zpos;

   typedef int16_t _sw_type;
  _sw_type sw;

   typedef double _xpos_ref_type;
  _xpos_ref_type xpos_ref;

   typedef double _ypos_ref_type;
  _ypos_ref_type ypos_ref;

   typedef double _zpos_ref_type;
  _zpos_ref_type zpos_ref;

   typedef double _xvel_type;
  _xvel_type xvel;

   typedef double _yvel_type;
  _yvel_type yvel;

   typedef double _zvel_type;
  _zvel_type zvel;

   typedef double _phi_type;
  _phi_type phi;

   typedef double _theta_type;
  _theta_type theta;

   typedef double _psi_type;
  _psi_type psi;

   typedef double _thrust_type;
  _thrust_type thrust;

   typedef double _xpos_obs_type;
  _xpos_obs_type xpos_obs;

   typedef double _ypos_obs_type;
  _ypos_obs_type ypos_obs;

   typedef double _zpos_obs_type;
  _zpos_obs_type zpos_obs;




  typedef boost::shared_ptr< ::mpc::msgMPC_Data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mpc::msgMPC_Data_<ContainerAllocator> const> ConstPtr;

}; // struct msgMPC_Data_

typedef ::mpc::msgMPC_Data_<std::allocator<void> > msgMPC_Data;

typedef boost::shared_ptr< ::mpc::msgMPC_Data > msgMPC_DataPtr;
typedef boost::shared_ptr< ::mpc::msgMPC_Data const> msgMPC_DataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mpc::msgMPC_Data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mpc::msgMPC_Data_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mpc

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'mpc': ['/home/formation/catkin_ws/src/mpc/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mpc::msgMPC_Data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mpc::msgMPC_Data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mpc::msgMPC_Data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mpc::msgMPC_Data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mpc::msgMPC_Data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mpc::msgMPC_Data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mpc::msgMPC_Data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a9b89a1a4b30c0f87ae7593794fcf97f";
  }

  static const char* value(const ::mpc::msgMPC_Data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa9b89a1a4b30c0f8ULL;
  static const uint64_t static_value2 = 0x7ae7593794fcf97fULL;
};

template<class ContainerAllocator>
struct DataType< ::mpc::msgMPC_Data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mpc/msgMPC_Data";
  }

  static const char* value(const ::mpc::msgMPC_Data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mpc::msgMPC_Data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 xpos\n\
float64 ypos\n\
float64 zpos\n\
\n\
int16   sw\n\
\n\
float64 xpos_ref\n\
float64 ypos_ref\n\
float64 zpos_ref\n\
\n\
float64 xvel\n\
float64 yvel\n\
float64 zvel\n\
\n\
float64 phi\n\
float64 theta\n\
float64 psi\n\
float64 thrust\n\
\n\
float64 xpos_obs\n\
float64 ypos_obs\n\
float64 zpos_obs\n\
";
  }

  static const char* value(const ::mpc::msgMPC_Data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mpc::msgMPC_Data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.xpos);
      stream.next(m.ypos);
      stream.next(m.zpos);
      stream.next(m.sw);
      stream.next(m.xpos_ref);
      stream.next(m.ypos_ref);
      stream.next(m.zpos_ref);
      stream.next(m.xvel);
      stream.next(m.yvel);
      stream.next(m.zvel);
      stream.next(m.phi);
      stream.next(m.theta);
      stream.next(m.psi);
      stream.next(m.thrust);
      stream.next(m.xpos_obs);
      stream.next(m.ypos_obs);
      stream.next(m.zpos_obs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct msgMPC_Data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mpc::msgMPC_Data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mpc::msgMPC_Data_<ContainerAllocator>& v)
  {
    s << indent << "xpos: ";
    Printer<double>::stream(s, indent + "  ", v.xpos);
    s << indent << "ypos: ";
    Printer<double>::stream(s, indent + "  ", v.ypos);
    s << indent << "zpos: ";
    Printer<double>::stream(s, indent + "  ", v.zpos);
    s << indent << "sw: ";
    Printer<int16_t>::stream(s, indent + "  ", v.sw);
    s << indent << "xpos_ref: ";
    Printer<double>::stream(s, indent + "  ", v.xpos_ref);
    s << indent << "ypos_ref: ";
    Printer<double>::stream(s, indent + "  ", v.ypos_ref);
    s << indent << "zpos_ref: ";
    Printer<double>::stream(s, indent + "  ", v.zpos_ref);
    s << indent << "xvel: ";
    Printer<double>::stream(s, indent + "  ", v.xvel);
    s << indent << "yvel: ";
    Printer<double>::stream(s, indent + "  ", v.yvel);
    s << indent << "zvel: ";
    Printer<double>::stream(s, indent + "  ", v.zvel);
    s << indent << "phi: ";
    Printer<double>::stream(s, indent + "  ", v.phi);
    s << indent << "theta: ";
    Printer<double>::stream(s, indent + "  ", v.theta);
    s << indent << "psi: ";
    Printer<double>::stream(s, indent + "  ", v.psi);
    s << indent << "thrust: ";
    Printer<double>::stream(s, indent + "  ", v.thrust);
    s << indent << "xpos_obs: ";
    Printer<double>::stream(s, indent + "  ", v.xpos_obs);
    s << indent << "ypos_obs: ";
    Printer<double>::stream(s, indent + "  ", v.ypos_obs);
    s << indent << "zpos_obs: ";
    Printer<double>::stream(s, indent + "  ", v.zpos_obs);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MPC_MESSAGE_MSGMPC_DATA_H
