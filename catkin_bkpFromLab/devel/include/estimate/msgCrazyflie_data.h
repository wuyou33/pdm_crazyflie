// Generated by gencpp from file estimate/msgCrazyflie_data.msg
// DO NOT EDIT!


#ifndef ESTIMATE_MESSAGE_MSGCRAZYFLIE_DATA_H
#define ESTIMATE_MESSAGE_MSGCRAZYFLIE_DATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace estimate
{
template <class ContainerAllocator>
struct msgCrazyflie_data_
{
  typedef msgCrazyflie_data_<ContainerAllocator> Type;

  msgCrazyflie_data_()
    : imu_time_msg(0.0)
    , imu_angx_msg(0.0)
    , imu_angy_msg(0.0)
    , imu_angz_msg(0.0)
    , imu_linx_msg(0.0)
    , imu_liny_msg(0.0)
    , imu_linz_msg(0.0)
    , vrpn_time_msg(0.0)
    , vrpn_posx_msg(0.0)
    , vrpn_posy_msg(0.0)
    , vrpn_posz_msg(0.0)
    , vrpn_velx_msg(0.0)
    , vrpn_vely_msg(0.0)
    , vrpn_velz_msg(0.0)
    , vrpn_linx_msg(0.0)
    , vrpn_liny_msg(0.0)
    , vrpn_linz_msg(0.0)
    , vrpn_orix_msg(0.0)
    , vrpn_oriy_msg(0.0)
    , vrpn_oriz_msg(0.0)
    , vrpn_oriw_msg(0.0)
    , vrpn_roll_msg(0.0)
    , vrpn_pitch_msg(0.0)
    , vrpn_yaw_msg(0.0)
    , vrpn_time_msg_obs(0.0)
    , vrpn_posx_msg_obs(0.0)
    , vrpn_posy_msg_obs(0.0)
    , vrpn_posz_msg_obs(0.0)
    , vrpn_velx_msg_obs(0.0)
    , vrpn_vely_msg_obs(0.0)
    , vrpn_velz_msg_obs(0.0)
    , vrpn_linx_msg_obs(0.0)
    , vrpn_liny_msg_obs(0.0)
    , vrpn_linz_msg_obs(0.0)
    , vrpn_orix_msg_obs(0.0)
    , vrpn_oriy_msg_obs(0.0)
    , vrpn_oriz_msg_obs(0.0)
    , vrpn_oriw_msg_obs(0.0)
    , vrpn_roll_msg_obs(0.0)
    , vrpn_pitch_msg_obs(0.0)
    , vrpn_yaw_msg_obs(0.0)  {
    }
  msgCrazyflie_data_(const ContainerAllocator& _alloc)
    : imu_time_msg(0.0)
    , imu_angx_msg(0.0)
    , imu_angy_msg(0.0)
    , imu_angz_msg(0.0)
    , imu_linx_msg(0.0)
    , imu_liny_msg(0.0)
    , imu_linz_msg(0.0)
    , vrpn_time_msg(0.0)
    , vrpn_posx_msg(0.0)
    , vrpn_posy_msg(0.0)
    , vrpn_posz_msg(0.0)
    , vrpn_velx_msg(0.0)
    , vrpn_vely_msg(0.0)
    , vrpn_velz_msg(0.0)
    , vrpn_linx_msg(0.0)
    , vrpn_liny_msg(0.0)
    , vrpn_linz_msg(0.0)
    , vrpn_orix_msg(0.0)
    , vrpn_oriy_msg(0.0)
    , vrpn_oriz_msg(0.0)
    , vrpn_oriw_msg(0.0)
    , vrpn_roll_msg(0.0)
    , vrpn_pitch_msg(0.0)
    , vrpn_yaw_msg(0.0)
    , vrpn_time_msg_obs(0.0)
    , vrpn_posx_msg_obs(0.0)
    , vrpn_posy_msg_obs(0.0)
    , vrpn_posz_msg_obs(0.0)
    , vrpn_velx_msg_obs(0.0)
    , vrpn_vely_msg_obs(0.0)
    , vrpn_velz_msg_obs(0.0)
    , vrpn_linx_msg_obs(0.0)
    , vrpn_liny_msg_obs(0.0)
    , vrpn_linz_msg_obs(0.0)
    , vrpn_orix_msg_obs(0.0)
    , vrpn_oriy_msg_obs(0.0)
    , vrpn_oriz_msg_obs(0.0)
    , vrpn_oriw_msg_obs(0.0)
    , vrpn_roll_msg_obs(0.0)
    , vrpn_pitch_msg_obs(0.0)
    , vrpn_yaw_msg_obs(0.0)  {
    }



   typedef double _imu_time_msg_type;
  _imu_time_msg_type imu_time_msg;

   typedef double _imu_angx_msg_type;
  _imu_angx_msg_type imu_angx_msg;

   typedef double _imu_angy_msg_type;
  _imu_angy_msg_type imu_angy_msg;

   typedef double _imu_angz_msg_type;
  _imu_angz_msg_type imu_angz_msg;

   typedef double _imu_linx_msg_type;
  _imu_linx_msg_type imu_linx_msg;

   typedef double _imu_liny_msg_type;
  _imu_liny_msg_type imu_liny_msg;

   typedef double _imu_linz_msg_type;
  _imu_linz_msg_type imu_linz_msg;

   typedef double _vrpn_time_msg_type;
  _vrpn_time_msg_type vrpn_time_msg;

   typedef double _vrpn_posx_msg_type;
  _vrpn_posx_msg_type vrpn_posx_msg;

   typedef double _vrpn_posy_msg_type;
  _vrpn_posy_msg_type vrpn_posy_msg;

   typedef double _vrpn_posz_msg_type;
  _vrpn_posz_msg_type vrpn_posz_msg;

   typedef double _vrpn_velx_msg_type;
  _vrpn_velx_msg_type vrpn_velx_msg;

   typedef double _vrpn_vely_msg_type;
  _vrpn_vely_msg_type vrpn_vely_msg;

   typedef double _vrpn_velz_msg_type;
  _vrpn_velz_msg_type vrpn_velz_msg;

   typedef double _vrpn_linx_msg_type;
  _vrpn_linx_msg_type vrpn_linx_msg;

   typedef double _vrpn_liny_msg_type;
  _vrpn_liny_msg_type vrpn_liny_msg;

   typedef double _vrpn_linz_msg_type;
  _vrpn_linz_msg_type vrpn_linz_msg;

   typedef double _vrpn_orix_msg_type;
  _vrpn_orix_msg_type vrpn_orix_msg;

   typedef double _vrpn_oriy_msg_type;
  _vrpn_oriy_msg_type vrpn_oriy_msg;

   typedef double _vrpn_oriz_msg_type;
  _vrpn_oriz_msg_type vrpn_oriz_msg;

   typedef double _vrpn_oriw_msg_type;
  _vrpn_oriw_msg_type vrpn_oriw_msg;

   typedef double _vrpn_roll_msg_type;
  _vrpn_roll_msg_type vrpn_roll_msg;

   typedef double _vrpn_pitch_msg_type;
  _vrpn_pitch_msg_type vrpn_pitch_msg;

   typedef double _vrpn_yaw_msg_type;
  _vrpn_yaw_msg_type vrpn_yaw_msg;

   typedef double _vrpn_time_msg_obs_type;
  _vrpn_time_msg_obs_type vrpn_time_msg_obs;

   typedef double _vrpn_posx_msg_obs_type;
  _vrpn_posx_msg_obs_type vrpn_posx_msg_obs;

   typedef double _vrpn_posy_msg_obs_type;
  _vrpn_posy_msg_obs_type vrpn_posy_msg_obs;

   typedef double _vrpn_posz_msg_obs_type;
  _vrpn_posz_msg_obs_type vrpn_posz_msg_obs;

   typedef double _vrpn_velx_msg_obs_type;
  _vrpn_velx_msg_obs_type vrpn_velx_msg_obs;

   typedef double _vrpn_vely_msg_obs_type;
  _vrpn_vely_msg_obs_type vrpn_vely_msg_obs;

   typedef double _vrpn_velz_msg_obs_type;
  _vrpn_velz_msg_obs_type vrpn_velz_msg_obs;

   typedef double _vrpn_linx_msg_obs_type;
  _vrpn_linx_msg_obs_type vrpn_linx_msg_obs;

   typedef double _vrpn_liny_msg_obs_type;
  _vrpn_liny_msg_obs_type vrpn_liny_msg_obs;

   typedef double _vrpn_linz_msg_obs_type;
  _vrpn_linz_msg_obs_type vrpn_linz_msg_obs;

   typedef double _vrpn_orix_msg_obs_type;
  _vrpn_orix_msg_obs_type vrpn_orix_msg_obs;

   typedef double _vrpn_oriy_msg_obs_type;
  _vrpn_oriy_msg_obs_type vrpn_oriy_msg_obs;

   typedef double _vrpn_oriz_msg_obs_type;
  _vrpn_oriz_msg_obs_type vrpn_oriz_msg_obs;

   typedef double _vrpn_oriw_msg_obs_type;
  _vrpn_oriw_msg_obs_type vrpn_oriw_msg_obs;

   typedef double _vrpn_roll_msg_obs_type;
  _vrpn_roll_msg_obs_type vrpn_roll_msg_obs;

   typedef double _vrpn_pitch_msg_obs_type;
  _vrpn_pitch_msg_obs_type vrpn_pitch_msg_obs;

   typedef double _vrpn_yaw_msg_obs_type;
  _vrpn_yaw_msg_obs_type vrpn_yaw_msg_obs;




  typedef boost::shared_ptr< ::estimate::msgCrazyflie_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::estimate::msgCrazyflie_data_<ContainerAllocator> const> ConstPtr;

}; // struct msgCrazyflie_data_

typedef ::estimate::msgCrazyflie_data_<std::allocator<void> > msgCrazyflie_data;

typedef boost::shared_ptr< ::estimate::msgCrazyflie_data > msgCrazyflie_dataPtr;
typedef boost::shared_ptr< ::estimate::msgCrazyflie_data const> msgCrazyflie_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::estimate::msgCrazyflie_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::estimate::msgCrazyflie_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace estimate

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'estimate': ['/home/formation/catkin_ws/src/estimate/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::estimate::msgCrazyflie_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::estimate::msgCrazyflie_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::estimate::msgCrazyflie_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::estimate::msgCrazyflie_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::estimate::msgCrazyflie_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::estimate::msgCrazyflie_data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::estimate::msgCrazyflie_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7b9455838bed400b7a1587cd4cf1be0a";
  }

  static const char* value(const ::estimate::msgCrazyflie_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7b9455838bed400bULL;
  static const uint64_t static_value2 = 0x7a1587cd4cf1be0aULL;
};

template<class ContainerAllocator>
struct DataType< ::estimate::msgCrazyflie_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "estimate/msgCrazyflie_data";
  }

  static const char* value(const ::estimate::msgCrazyflie_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::estimate::msgCrazyflie_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 imu_time_msg\n\
float64 imu_angx_msg\n\
float64 imu_angy_msg\n\
float64 imu_angz_msg\n\
float64 imu_linx_msg\n\
float64 imu_liny_msg\n\
float64 imu_linz_msg\n\
float64 vrpn_time_msg\n\
float64 vrpn_posx_msg\n\
float64 vrpn_posy_msg\n\
float64 vrpn_posz_msg\n\
float64 vrpn_velx_msg\n\
float64 vrpn_vely_msg\n\
float64 vrpn_velz_msg\n\
float64 vrpn_linx_msg\n\
float64 vrpn_liny_msg\n\
float64 vrpn_linz_msg\n\
float64 vrpn_orix_msg\n\
float64 vrpn_oriy_msg\n\
float64 vrpn_oriz_msg\n\
float64 vrpn_oriw_msg\n\
float64 vrpn_roll_msg\n\
float64 vrpn_pitch_msg\n\
float64 vrpn_yaw_msg\n\
\n\
float64 vrpn_time_msg_obs\n\
float64 vrpn_posx_msg_obs\n\
float64 vrpn_posy_msg_obs\n\
float64 vrpn_posz_msg_obs\n\
float64 vrpn_velx_msg_obs\n\
float64 vrpn_vely_msg_obs\n\
float64 vrpn_velz_msg_obs\n\
float64 vrpn_linx_msg_obs\n\
float64 vrpn_liny_msg_obs\n\
float64 vrpn_linz_msg_obs\n\
float64 vrpn_orix_msg_obs\n\
float64 vrpn_oriy_msg_obs\n\
float64 vrpn_oriz_msg_obs\n\
float64 vrpn_oriw_msg_obs\n\
float64 vrpn_roll_msg_obs\n\
float64 vrpn_pitch_msg_obs\n\
float64 vrpn_yaw_msg_obs\n\
";
  }

  static const char* value(const ::estimate::msgCrazyflie_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::estimate::msgCrazyflie_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.imu_time_msg);
      stream.next(m.imu_angx_msg);
      stream.next(m.imu_angy_msg);
      stream.next(m.imu_angz_msg);
      stream.next(m.imu_linx_msg);
      stream.next(m.imu_liny_msg);
      stream.next(m.imu_linz_msg);
      stream.next(m.vrpn_time_msg);
      stream.next(m.vrpn_posx_msg);
      stream.next(m.vrpn_posy_msg);
      stream.next(m.vrpn_posz_msg);
      stream.next(m.vrpn_velx_msg);
      stream.next(m.vrpn_vely_msg);
      stream.next(m.vrpn_velz_msg);
      stream.next(m.vrpn_linx_msg);
      stream.next(m.vrpn_liny_msg);
      stream.next(m.vrpn_linz_msg);
      stream.next(m.vrpn_orix_msg);
      stream.next(m.vrpn_oriy_msg);
      stream.next(m.vrpn_oriz_msg);
      stream.next(m.vrpn_oriw_msg);
      stream.next(m.vrpn_roll_msg);
      stream.next(m.vrpn_pitch_msg);
      stream.next(m.vrpn_yaw_msg);
      stream.next(m.vrpn_time_msg_obs);
      stream.next(m.vrpn_posx_msg_obs);
      stream.next(m.vrpn_posy_msg_obs);
      stream.next(m.vrpn_posz_msg_obs);
      stream.next(m.vrpn_velx_msg_obs);
      stream.next(m.vrpn_vely_msg_obs);
      stream.next(m.vrpn_velz_msg_obs);
      stream.next(m.vrpn_linx_msg_obs);
      stream.next(m.vrpn_liny_msg_obs);
      stream.next(m.vrpn_linz_msg_obs);
      stream.next(m.vrpn_orix_msg_obs);
      stream.next(m.vrpn_oriy_msg_obs);
      stream.next(m.vrpn_oriz_msg_obs);
      stream.next(m.vrpn_oriw_msg_obs);
      stream.next(m.vrpn_roll_msg_obs);
      stream.next(m.vrpn_pitch_msg_obs);
      stream.next(m.vrpn_yaw_msg_obs);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct msgCrazyflie_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::estimate::msgCrazyflie_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::estimate::msgCrazyflie_data_<ContainerAllocator>& v)
  {
    s << indent << "imu_time_msg: ";
    Printer<double>::stream(s, indent + "  ", v.imu_time_msg);
    s << indent << "imu_angx_msg: ";
    Printer<double>::stream(s, indent + "  ", v.imu_angx_msg);
    s << indent << "imu_angy_msg: ";
    Printer<double>::stream(s, indent + "  ", v.imu_angy_msg);
    s << indent << "imu_angz_msg: ";
    Printer<double>::stream(s, indent + "  ", v.imu_angz_msg);
    s << indent << "imu_linx_msg: ";
    Printer<double>::stream(s, indent + "  ", v.imu_linx_msg);
    s << indent << "imu_liny_msg: ";
    Printer<double>::stream(s, indent + "  ", v.imu_liny_msg);
    s << indent << "imu_linz_msg: ";
    Printer<double>::stream(s, indent + "  ", v.imu_linz_msg);
    s << indent << "vrpn_time_msg: ";
    Printer<double>::stream(s, indent + "  ", v.vrpn_time_msg);
    s << indent << "vrpn_posx_msg: ";
    Printer<double>::stream(s, indent + "  ", v.vrpn_posx_msg);
    s << indent << "vrpn_posy_msg: ";
    Printer<double>::stream(s, indent + "  ", v.vrpn_posy_msg);
    s << indent << "vrpn_posz_msg: ";
    Printer<double>::stream(s, indent + "  ", v.vrpn_posz_msg);
    s << indent << "vrpn_velx_msg: ";
    Printer<double>::stream(s, indent + "  ", v.vrpn_velx_msg);
    s << indent << "vrpn_vely_msg: ";
    Printer<double>::stream(s, indent + "  ", v.vrpn_vely_msg);
    s << indent << "vrpn_velz_msg: ";
    Printer<double>::stream(s, indent + "  ", v.vrpn_velz_msg);
    s << indent << "vrpn_linx_msg: ";
    Printer<double>::stream(s, indent + "  ", v.vrpn_linx_msg);
    s << indent << "vrpn_liny_msg: ";
    Printer<double>::stream(s, indent + "  ", v.vrpn_liny_msg);
    s << indent << "vrpn_linz_msg: ";
    Printer<double>::stream(s, indent + "  ", v.vrpn_linz_msg);
    s << indent << "vrpn_orix_msg: ";
    Printer<double>::stream(s, indent + "  ", v.vrpn_orix_msg);
    s << indent << "vrpn_oriy_msg: ";
    Printer<double>::stream(s, indent + "  ", v.vrpn_oriy_msg);
    s << indent << "vrpn_oriz_msg: ";
    Printer<double>::stream(s, indent + "  ", v.vrpn_oriz_msg);
    s << indent << "vrpn_oriw_msg: ";
    Printer<double>::stream(s, indent + "  ", v.vrpn_oriw_msg);
    s << indent << "vrpn_roll_msg: ";
    Printer<double>::stream(s, indent + "  ", v.vrpn_roll_msg);
    s << indent << "vrpn_pitch_msg: ";
    Printer<double>::stream(s, indent + "  ", v.vrpn_pitch_msg);
    s << indent << "vrpn_yaw_msg: ";
    Printer<double>::stream(s, indent + "  ", v.vrpn_yaw_msg);
    s << indent << "vrpn_time_msg_obs: ";
    Printer<double>::stream(s, indent + "  ", v.vrpn_time_msg_obs);
    s << indent << "vrpn_posx_msg_obs: ";
    Printer<double>::stream(s, indent + "  ", v.vrpn_posx_msg_obs);
    s << indent << "vrpn_posy_msg_obs: ";
    Printer<double>::stream(s, indent + "  ", v.vrpn_posy_msg_obs);
    s << indent << "vrpn_posz_msg_obs: ";
    Printer<double>::stream(s, indent + "  ", v.vrpn_posz_msg_obs);
    s << indent << "vrpn_velx_msg_obs: ";
    Printer<double>::stream(s, indent + "  ", v.vrpn_velx_msg_obs);
    s << indent << "vrpn_vely_msg_obs: ";
    Printer<double>::stream(s, indent + "  ", v.vrpn_vely_msg_obs);
    s << indent << "vrpn_velz_msg_obs: ";
    Printer<double>::stream(s, indent + "  ", v.vrpn_velz_msg_obs);
    s << indent << "vrpn_linx_msg_obs: ";
    Printer<double>::stream(s, indent + "  ", v.vrpn_linx_msg_obs);
    s << indent << "vrpn_liny_msg_obs: ";
    Printer<double>::stream(s, indent + "  ", v.vrpn_liny_msg_obs);
    s << indent << "vrpn_linz_msg_obs: ";
    Printer<double>::stream(s, indent + "  ", v.vrpn_linz_msg_obs);
    s << indent << "vrpn_orix_msg_obs: ";
    Printer<double>::stream(s, indent + "  ", v.vrpn_orix_msg_obs);
    s << indent << "vrpn_oriy_msg_obs: ";
    Printer<double>::stream(s, indent + "  ", v.vrpn_oriy_msg_obs);
    s << indent << "vrpn_oriz_msg_obs: ";
    Printer<double>::stream(s, indent + "  ", v.vrpn_oriz_msg_obs);
    s << indent << "vrpn_oriw_msg_obs: ";
    Printer<double>::stream(s, indent + "  ", v.vrpn_oriw_msg_obs);
    s << indent << "vrpn_roll_msg_obs: ";
    Printer<double>::stream(s, indent + "  ", v.vrpn_roll_msg_obs);
    s << indent << "vrpn_pitch_msg_obs: ";
    Printer<double>::stream(s, indent + "  ", v.vrpn_pitch_msg_obs);
    s << indent << "vrpn_yaw_msg_obs: ";
    Printer<double>::stream(s, indent + "  ", v.vrpn_yaw_msg_obs);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ESTIMATE_MESSAGE_MSGCRAZYFLIE_DATA_H
