#include "StdAfx.h"
#include "GdnCont.h"

CGdnCont::CGdnCont(void)
{
	int i;

	this->U.SetSize(4*N,1);	this->U.SetAllZero();
	this->dU.SetSize(4*N,1);	this->dU.SetAllZero();
	this->X.SetSize(6,1);	this->X.SetAllZero();
	this->dX.SetSize(6,1);	this->dX.SetAllZero();

	this->S.SetSize(6,6);	this->S.SetAllZero();
	this->Q.SetSize(6,6);	this->Q.SetAllZero();
	this->R.SetSize(4,4);	this->R.SetAllZero();

	// MPCパラメータ
	///////////////////////////////////////////////
	// S
	this->S.SetAt(0,0,60.0);//x
	this->S.SetAt(1,1,60.0);//y
	this->S.SetAt(2,2,200.0);//z
	this->S.SetAt(3,3,500.0);//vx
	this->S.SetAt(4,4,500.0);//vy
	this->S.SetAt(5,5,10.0);//vz
	// Q
	this->Q.SetAt(0,0,20.0);//x　　0,0,5.0
	this->Q.SetAt(1,1,20.0);//y　　1,1,5.0
	this->Q.SetAt(2,2,5.0);//z
	this->Q.SetAt(3,3,2.0);//vx
	this->Q.SetAt(4,4,2.0);//vy
	this->Q.SetAt(5,5,2.0);//vz
	// R
	for(i = 0; i < 4; i++) this->R.SetAt(i,i,200.0);

	this->dt = 0.1;	// サンプリングタイム
	this->obj_a[0] = 0.0;	this->obj_a[1] = -0.2;	this->obj_a[2] = 1.3;	// 障害物位置（絶対位置）
	this->rx = 0.0;	//状態拘束重み 3000
	this->ru = 10000.0;	//入力拘束重み 10000
	this->Rr = 0.4;	//半径
	this->phi_max = 10.0*3.14/180;	//最大傾斜角
	///////////////////////////////////////////////
}

CGdnCont::~CGdnCont(void)
{
	this->U.RemoveAll();
	this->dU.RemoveAll();
	this->X.RemoveAll();
	this->dX.RemoveAll();

	this->S.RemoveAll();
	this->Q.RemoveAll();
	this->R.RemoveAll();

}


//////////////////////////////////////////////////////////////////////////
// 制御演算初期化
void CGdnCont::ResetCont(SensorData c_SensorData)
{
	this->SW = 0;

	this->U.SetAllZero();
	this->dU.SetAllZero();
	this->X.SetAllZero();
	this->dX.SetAllZero();

	// 目標値生成
	this->m_RefData.X = c_SensorData.PosX;
	this->m_RefData.Y = c_SensorData.PosY;
	this->m_RefData.Z = - c_SensorData.PosZ;
	this->m_RefData.roll = 0.0;
	this->m_RefData.pitch = 0.0;
	this->m_RefData.yaw = 0.0;
	this->m_RefData.Fx = 0.0;
	this->m_RefData.Fy = 0.0;
	this->m_RefData.Fz = 0.0;
	this->m_RefData.thrust = 0.264*9.81;

	// 障害物位置生成（相対位置）
	this->obj[0] = this->obj_a[0] - this->m_RefData.X;
	this->obj[1] = this->obj_a[1] - this->m_RefData.Y;
	this->obj[2] = this->obj_a[2] - this->m_RefData.Z;

}


//////////////////////////////////////////////////////////////////////////
// 誘導制御演算(MPC)
void CGdnCont::GdnCont(RefNext c_RefNext, SensorData c_SensorData)
{
	// 目標値生成
	if(c_RefNext.SW == 1){
		this->m_RefData.X = c_RefNext.X;
		this->m_RefData.Y = c_RefNext.Y;
		this->m_RefData.Z = c_RefNext.Z;
		// 障害物位置生成（相対位置）
		this->obj[0] = this->obj_a[0] - this->m_RefData.X;
		this->obj[1] = this->obj_a[1] - this->m_RefData.Y;
		this->obj[2] = this->obj_a[2] - this->m_RefData.Z;
	}

	//時間計測
	timeBeginPeriod(1);
	int bef = timeGetTime();

	// 状態の更新
	this->dX = this->X * (-1.0);
	this->X.SetAt(0,0,c_SensorData.PosX - this->m_RefData.X);
	this->X.SetAt(1,0,c_SensorData.PosY - this->m_RefData.Y);
	this->X.SetAt(2,0,-c_SensorData.PosZ - this->m_RefData.Z);
	this->X.SetAt(3,0,c_SensorData.Vx);
	this->X.SetAt(4,0,c_SensorData.Vy);
	this->X.SetAt(5,0,c_SensorData.Vz);
	this->dX += this->X;
	this->dX = this->dX / this->dt;

	// 初期入力の決定
	if(this->SW == 0){
		this->SW = 1;
		this->dX.SetAllZero();	//最初だけゼロ
		this->U.SetAllZero();//本来計算あり
	}

	// FDGMRES	
	this->FDGMRES();
	this->U += this->dU * this->dt;

	// 制御入力生成（外力ベクトルto姿勢と推力変換）
	this->m_RefData.Fx  = this->U.ElementAt(0,0);
	this->m_RefData.Fy  = this->U.ElementAt(1,0);
	this->m_RefData.Fz  = this->U.ElementAt(2,0)-0.264*9.81;	if(this->U.ElementAt(2,0) >= 0.264*9.81) this->m_RefData.Fz = -0.0001;	//目標姿勢生成にFzが0はダメ
	this->m_RefData.yaw = this->U.ElementAt(3,0);
	this->F2Att();

	//時間計測
	this->mpctime = timeGetTime() - bef;
	timeEndPeriod(1);
	
}

//////////////////////////////////////////////////////////////////////////
// 外力ベクトルto姿勢
void CGdnCont::F2Att()
{
	// 行列の生成
	CUMatrix<double, const double&> x,y,z,xc,buf;
	x.SetSize(3,1);	x.SetAllZero();
	y.SetSize(3,1);	y.SetAllZero();
	z.SetSize(3,1);	z.SetAllZero();
	xc.SetSize(3,1);	xc.SetAllZero();
	buf.SetSize(3,1);	buf.SetAllZero();
	//Rot.SetSize(3,3);	Rot.SetAllZero();

	// 推力演算
	this->m_RefData.thrust = sqrt(pow(this->m_RefData.Fx,2.0)+pow(this->m_RefData.Fy,2.0)+pow(this->m_RefData.Fz,2.0));

	// 機体z軸ベクトル演算
	if(this->m_RefData.thrust != 0){
		z.SetAt(0, 0, -this->m_RefData.Fx / this->m_RefData.thrust);
		z.SetAt(1, 0, -this->m_RefData.Fy / this->m_RefData.thrust);
		z.SetAt(2, 0, -this->m_RefData.Fz / this->m_RefData.thrust);
	}

	// 中間座標系x軸ベクトル演算
	xc.SetAt(0, 0, cos(this->m_RefData.yaw));
	xc.SetAt(1, 0, sin(this->m_RefData.yaw));
	xc.SetAt(2, 0, 0.0);

	// 機体y軸ベクトル演算
	buf = this->Cross(z, xc);
	y = buf / sqrt(pow(buf.ElementAt(0,0),2.0)+pow(buf.ElementAt(1,0),2.0)+pow(buf.ElementAt(2,0),2.0));

	// 機体x軸ベクトル演算
	x = this->Cross(y, z);
	
	// 回転行列演算
	//Rot.SetAtGrow(0,0, x);
	//Rot.SetAtGrow(0,1, y);
	//Rot.SetAtGrow(0,2, z);
	//
	// 回転行列to目標姿勢
	//this->m_RefData.pitch = asin(-Rot.ElementAt(2,0));
	//if(this->m_RefData.pitch != 90.0*3.14/180.0){
	//	this->m_RefData.roll  = asin(Rot.ElementAt(2,1) / cos(this->m_RefData.pitch));
	//}
	//this->Rot2Att();//不要

	this->m_RefData.pitch = asin(-x.ElementAt(2,0));
	if(this->m_RefData.pitch != 90.0*3.14/180.0){
		this->m_RefData.roll  = asin(y.ElementAt(2,0) / cos(this->m_RefData.pitch));
	}

	// 行列の解放
	x.RemoveAll();
	y.RemoveAll();
	z.RemoveAll();
	xc.RemoveAll();
	buf.RemoveAll();
	//Rot.RemoveAll();

}

//////////////////////////////////////////////////////////////////////////
// FDGMRES
void CGdnCont::FDGMRES(void)
{
	// FDGMRESパラメータ
	////////////////////////////////////////////////////
	int		kmax = 1;		// イタレーション回数
	double	h = 0.1;	// 微小進み
	double	zeta = 10.0;	// ゼータ
	////////////////////////////////////////////////////

	int i,j;
	int k = 0;
	double rho = 0.0;
	double bufd;
	double w1,w2;
	
	// 行列の生成
	CUMatrix<double, const double&> buf,buf2,r,v,hh,c,s,g;
	buf.SetSize(4*N,1);	buf.SetAllZero();
	buf2.SetSize(4*N,1);	buf2.SetAllZero();
	r.SetSize(4*N,1);	r.SetAllZero();
	v.SetSize(4*N,kmax+1);	v.SetAllZero();
	hh.SetSize(kmax+1,kmax+1);	hh.SetAllZero();
	c.SetSize(kmax+1,1);	c.SetAllZero();
	s.SetSize(kmax+1,1);	s.SetAllZero();
	g.SetSize(kmax+1,1);	g.SetAllZero();


	buf = this->CalcF(this->U, this->X);
	buf2 = this->CalcF(this->U, this->X + this->dX * h);
	r = buf*(-1.0)*zeta - (buf2-buf)/h;

	rho = 0.0;
	for(i = 0; i < 4*N; i++) rho += pow(r.ElementAt(i,0), 2.0);
	rho = sqrt(rho);

	g.SetAt(0,0,rho);
	v.SetAtGrow(0,0, r / rho);

	// iteration
	while(k<kmax){
		//(a)
		k+=1;
		//(b)
		v.SetAtGrow(0,k,(this->CalcF(this->U+v.Extract(0,4*N,k-1,1)*h, this->X+this->dX*h) - this->CalcF(this->U, this->X+this->dX*h))/h);
		for(j = 0; j < k; j++){
			hh.SetAt(j,k-1,this->Trans(v.Extract(0,4*N,j,1))*v.Extract(0,4*N,k,1));
			v.SetAtGrow(0,k,v.Extract(0,4*N,k,1)-v.Extract(0,4*N,j,1)*hh.ElementAt(j,k-1));
		}
		//(c)
		bufd = 0.0;
		for(i = 0; i < 4*N; i++) bufd += pow(v.ElementAt(i,k), 2.0);
		bufd = sqrt(bufd);
		hh.SetAt(k,k-1,bufd);
		//(d)
		if(hh.ElementAt(k,k-1) != 0.0) v.SetAtGrow(0,k,v.Extract(0,4*N,k,1)/hh.ElementAt(k,k-1));
		//(e)
		if(k>1){
			for(i = 0; i < k-1; i++){
				w1 = c.ElementAt(i,0)*hh.ElementAt(i,k-1) - s.ElementAt(i,0)*hh.ElementAt(i+1,k-1);
				w2 = s.ElementAt(i,0)*hh.ElementAt(i,k-1) + c.ElementAt(i,0)*hh.ElementAt(i+1,k-1);
				hh.SetAt(i,k-1,w1);
				hh.SetAt(i+1,k-1,w2);
			}
		}
		bufd = 0.0;
		for(i = k-1; i <= k; i++) bufd += pow(hh.ElementAt(i,k-1), 2.0);
		bufd = sqrt(bufd);
		if(bufd != 0.0){
			c.SetAt(k-1,0, hh.ElementAt(k-1,k-1)/bufd);
			s.SetAt(k-1,0, - hh.ElementAt(k,k-1)/bufd);
			hh.SetAt(k-1,k-1,c.ElementAt(k-1,0)*hh.ElementAt(k-1,k-1)-s.ElementAt(k-1,0)*hh.ElementAt(k,k-1));
			hh.SetAt(k,k-1,0.0);

			w1 = c.ElementAt(k-1,0)*g.ElementAt(k-1,0) - s.ElementAt(k-1,0)*g.ElementAt(k,0);
			w2 = s.ElementAt(k-1,0)*g.ElementAt(k-1,0) + c.ElementAt(k-1,0)*g.ElementAt(k,0);
			g.SetAt(k-1,0,w1);
			g.SetAt(k,0,w2);
		}
		//(f)
		//rho = g.ElementAt(k,0);
		//if(rho < 0) rho = -1.0 * rho;
	}

	this->dU = v.Extract(0,4*N,0,k)*((hh.Extract(0,k,0,k)).Inverse())*g.Extract(0,k,0,1);

	// 行列の解放
	buf.RemoveAll();
	buf2.RemoveAll();
	r.RemoveAll();
	v.RemoveAll();
	hh.RemoveAll();
	c.RemoveAll();
	s.RemoveAll();
	g.RemoveAll();

}

//////////////////////////////////////////////////////////////////////////
// Fの計算
CUMatrix<double, const double&> CGdnCont::CalcF(CUMatrix<double, const double&> ustar, CUMatrix<double, const double&> xinit)
{
	// モデルパラメータ
	///////////////////////////////////////////
	double la = 1.0;	// 抵抗係数パラメータ
	double lb = 0.2;	// 抵抗係数パラメータ
	double kxy = 0.01;	// 抵抗係数パラメータ（XY軸）
	double kz = 0.07;	// 抵抗係数パラメータ（Z軸）
	double m = 0.264;	// 質量
	double g = 9.81;	// 重力加速度
	///////////////////////////////////////////

	int i,j;
	double bufd;
	CUMatrix<double, const double&> xstar,f,lambda,dfdx,buf,buf2,dfdu,F,buf3,buf4;
	xstar.SetSize(6,N+1);	xstar.SetAllZero();
	f.SetSize(6,1);			f.SetAllZero();
	lambda.SetSize(6,N+1);	lambda.SetAllZero();
	dfdx.SetSize(6,6);		dfdx.SetAllZero();
	buf.SetSize(6,1);		buf.SetAllZero();
	buf2.SetSize(6,1);		buf2.SetAllZero();
	dfdu.SetSize(6,4);		dfdu.SetAllZero();
	F.SetSize(4*N,1);		F.SetAllZero();
	buf3.SetSize(4,1);		buf3.SetAllZero();
	buf4.SetSize(4,1);		buf4.SetAllZero();

	// 状態系列の生成
	for(i = 0; i < 6; i++){
		xstar.SetAt(i,0,xinit.ElementAt(i,0));
	}
	for(i = 0; i < N; i++){
		for(j = 0; j < 3; j++) f.SetAt(j,0,xstar.ElementAt(j+3,i));
		f.SetAt(3,0,(-kxy*(la+lb*sin(ustar.ElementAt(4*i+3,0)))*xstar.ElementAt(3,i) + ustar.ElementAt(4*i,0)) / m);
		f.SetAt(4,0,(-kxy*(la+lb*cos(ustar.ElementAt(4*i+3,0)))*xstar.ElementAt(4,i) + ustar.ElementAt(4*i+1,0)) / m);
		f.SetAt(5,0,(-kz*xstar.ElementAt(5,i) + ustar.ElementAt(4*i+2,0)) / m);// + m*g

		for(j = 0; j < 6; j++) xstar.SetAt(j,i+1,xstar.ElementAt(j,i)+f.ElementAt(j,0)*this->dt);
	}
	

	// ラグランジュ乗数の生成
	buf2 = this->S*xstar.Extract(0,6,N,1)*2.0;
	for(i = 0; i < 6; i++) lambda.SetAt(i,N,buf2.ElementAt(i,0));
	for(i = N-1; i >= 1; i--){
		//df/dx
		for(j = 0; j < 3; j++) dfdx.SetAt(j,j+3,1.0);
		dfdx.SetAt(3,3,-kxy*(la+lb*sin(ustar.ElementAt(4*i+3,0)))/m);
		dfdx.SetAt(4,4,-kxy*(la+lb*cos(ustar.ElementAt(4*i+3,0)))/m);
		dfdx.SetAt(5,5,-kz/m);
		//dp/dx
		for(j=0;j<2;j++) buf.SetAt(j,0,xstar.ElementAt(j,i)-this->obj[j]);	//jが0,1,2で球，0,1までで円筒
		bufd = 0.0;
		for(j=0;j<6;j++) bufd += pow(buf.ElementAt(j,0),2.0);
		// - buf*2.0*this->rx/(0.0001-(pow(this->Rr,2.0)-bufd))//状態拘束log
		// - buf*4.0*this->rx*max(0,pow(this->Rr,2.0)-bufd)//状態拘束max
		buf2 = this->Trans(Q)*xstar.Extract(0,6,i,1)*2.0 + this->Trans(dfdx)*lambda.Extract(0,6,i+1,1) - buf*4.0*this->rx*max(0,pow(this->Rr,2.0)-bufd);//状態拘束max

		for(j=0;j<6;j++) lambda.SetAt(j,i,lambda.ElementAt(j,i+1) + buf2.ElementAt(j,0) * this->dt);
	}

	// Fの計算
	for(i = 0; i < N; i++){
		for(j = 0; j < 3; j++) dfdu.SetAt(j+3,j,1.0/m);
		dfdu.SetAt(3,3,-kxy*lb*cos(ustar.ElementAt(4*i+3,0))/m*xstar.ElementAt(3,i));
		dfdu.SetAt(4,3,-kxy*lb*sin(ustar.ElementAt(4*i+3,0))/m*xstar.ElementAt(4,i));
		//入力拘束
		buf4.SetAt(0,0,ustar.ElementAt(4*i,0));
		buf4.SetAt(1,0,ustar.ElementAt(4*i+1,0));
		buf4 = buf4*4.0*this->ru*max(0,pow(ustar.ElementAt(4*i,0),2.0)+pow(ustar.ElementAt(4*i+1,0),2.0)-pow(m*g*sin(this->phi_max),2.0));

		buf3 = this->Trans(this->R)*ustar.Extract(4*i,4,0,1)*2.0 + this->Trans(dfdu)*lambda.Extract(0,6,i+1,1)*2.0 + buf4;
		for(j = 0; j < 4; j++) F.SetAt(4*i+j,0,buf3.ElementAt(j,0));
	}

	// 行列の解放
	xstar.RemoveAll();
	f.RemoveAll();
	lambda.RemoveAll();
	dfdx.RemoveAll();
	buf.RemoveAll();
	buf2.RemoveAll();
	dfdu.RemoveAll();
	buf3.RemoveAll();
	buf4.RemoveAll();

	return F;
}

//////////////////////////////////////////////////////////////////////////
// 回転行列to姿勢
void CGdnCont::Rot2Att(void)
{
/*	double quat[4],elem[4],mult,C_11,C_12,C_13,C_23,C_33;
	int i;
	int biggest = 1;

	// 回転行列toクォータニオン
	// 最大成分の検索
	elem[0] =  this->Rot.ElementAt(0,0) -this->Rot.ElementAt(1,1) -this->Rot.ElementAt(2,2) + 1.0;
	elem[1] = -this->Rot.ElementAt(0,0) +this->Rot.ElementAt(1,1) -this->Rot.ElementAt(2,2) + 1.0;
	elem[2] = -this->Rot.ElementAt(0,0) -this->Rot.ElementAt(1,1) +this->Rot.ElementAt(2,2) + 1.0;
	elem[3] =  this->Rot.ElementAt(0,0) +this->Rot.ElementAt(1,1) +this->Rot.ElementAt(2,2) + 1.0;
	for(i = 0; i < 4; i++){
		if(elem[i] > elem[biggest]) biggest = i;
	}
	// 最大要素の算出
	quat[biggest] = sqrt(elem[biggest]) / 2.0;
	mult = 1.0 / (4.0 * quat[biggest]);
	// クォータニオンの算出
	if(biggest == 0){
		quat[1] = (this->Rot.ElementAt(1,0) + this->Rot.ElementAt(0,1)) * mult;
		quat[2] = (this->Rot.ElementAt(0,2) + this->Rot.ElementAt(2,0)) * mult;
		quat[3] = (this->Rot.ElementAt(2,1) - this->Rot.ElementAt(1,2)) * mult;
	}
	else if(biggest == 1){
		quat[0] = (this->Rot.ElementAt(1,0) + this->Rot.ElementAt(0,1)) * mult;
		quat[2] = (this->Rot.ElementAt(2,1) + this->Rot.ElementAt(1,2)) * mult;
		quat[3] = (this->Rot.ElementAt(0,2) - this->Rot.ElementAt(2,0)) * mult;
	}
	else if(biggest == 2){
		quat[0] = (this->Rot.ElementAt(0,2) + this->Rot.ElementAt(2,0)) * mult;
		quat[1] = (this->Rot.ElementAt(2,1) + this->Rot.ElementAt(1,2)) * mult;
		quat[3] = (this->Rot.ElementAt(1,0) - this->Rot.ElementAt(0,1)) * mult;
	}
	else if(biggest == 3){
		quat[0] = (this->Rot.ElementAt(2,1) - this->Rot.ElementAt(1,2)) * mult;
		quat[1] = (this->Rot.ElementAt(0,2) - this->Rot.ElementAt(2,0)) * mult;
		quat[2] = (this->Rot.ElementAt(1,0) - this->Rot.ElementAt(0,1)) * mult;
	}

	// クォータニオンtoオイラー角
	C_11 = quat[3] * quat[3] + quat[0] * quat[0] - quat[1] * quat[1] - quat[2] * quat[2];
	C_12 = 2.0 * (quat[0] * quat[1] + quat[3] * quat[2]);
	C_13 = 2.0 * (quat[0] * quat[2] - quat[3] * quat[1]);
	C_23 = 2.0 * (quat[1] * quat[2] + quat[3] * quat[0]);
	C_33 = quat[3] * quat[3] - quat[0] * quat[0] - quat[1] * quat[1] + quat[2] * quat[2];
	this->m_RefData.roll  = atan2(C_23,C_33);
	this->m_RefData.pitch = asin(-C_13);
	this->m_RefData.yaw   = atan2(C_12,C_11);
*/
}

//////////////////////////////////////////////////////////////////////////
// 外積
CUMatrix<double, const double&> CGdnCont::Cross(CUMatrix<double, const double&> a, CUMatrix<double, const double&> b)
{
	CUMatrix<double, const double&> c;
	c.SetSize(3,1);	c.SetAllZero();

	c.SetAt(0,0, a.ElementAt(1,0)*b.ElementAt(2,0)-a.ElementAt(2,0)*b.ElementAt(1,0));
	c.SetAt(1,0, a.ElementAt(2,0)*b.ElementAt(0,0)-a.ElementAt(0,0)*b.ElementAt(2,0));
	c.SetAt(2,0, a.ElementAt(0,0)*b.ElementAt(1,0)-a.ElementAt(1,0)*b.ElementAt(0,0));

	return c;
}

//////////////////////////////////////////////////////////////////////////
// 転置の計算
CUMatrix<double, const double&> CGdnCont::Trans(CUMatrix<double,const double&> a)
{
	int i,j;

	int Row = a.GetSizeRow();
	int Col = a.GetSizeCol();

	CUMatrix<double, const double&> b;
	b.SetSize(Col,Row);	b.SetAllZero();

	for(i = 0; i < Col; i++){
		for(j= 0; j < Row; j++){
			b.SetAt(i,j,a.ElementAt(j,i));
		}
	}

	return b;
}
