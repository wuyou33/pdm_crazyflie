#include <ros/ros.h>
#include <std_msgs/Header.h>
#include "estimate/msgCrazyflie_data.h"
#include "mpc/msgMPC.h"
#include <fstream>

std::ofstream ofs("MPC_debug.txt"); //textメッセージ

int flag_mpc;
double esti_box[21],mpc_box[4],U_box[80],X_ob[9];
estimate::msgCrazyflie_data esti_data;
mpc::msgMPC mpc_msg;
bool EstimateFlag,MPCFlag;

void chatterCallback_estimate(const estimate::msgCrazyflie_data& msg_esti)	//estimateデータ取得
{
  EstimateFlag = true;
  esti_data = msg_esti;

  //if(true == EstimateFlag && true == MPCFlag)
  {
//IMU data
    esti_box[0] = esti_data.imu_time_msg;
    esti_box[1] = esti_data.imu_angx_msg;
    esti_box[2] = esti_data.imu_angy_msg;
    esti_box[3] = esti_data.imu_angz_msg;
    esti_box[4] = esti_data.imu_linx_msg;
    esti_box[5] = esti_data.imu_liny_msg;
    esti_box[6] = esti_data.imu_linz_msg;
//Motion_Capture data
    esti_box[7] = esti_data.vrpn_time_msg;
    esti_box[8] = esti_data.vrpn_posx_msg;
    esti_box[9] = esti_data.vrpn_posy_msg;
    esti_box[10] = esti_data.vrpn_posz_msg;
    esti_box[11] = esti_data.vrpn_velx_msg;
    esti_box[12] = esti_data.vrpn_vely_msg;
    esti_box[13] = esti_data.vrpn_velz_msg;
    esti_box[14] = esti_data.vrpn_linx_msg;
    esti_box[15] = esti_data.vrpn_liny_msg;
    esti_box[16] = esti_data.vrpn_linz_msg;
    esti_box[17] = esti_data.vrpn_orix_msg;
    esti_box[18] = esti_data.vrpn_oriy_msg;
    esti_box[19] = esti_data.vrpn_oriz_msg;
    esti_box[20] = esti_data.vrpn_oriw_msg;
  }
}

void chatterCallback_mpc_main(const mpc::msgMPC& msg_mpc)	//estimateデータ取得
{
  MPCFlag = true;
  mpc_msg = msg_mpc;

  //if(true == EstimateFlag && true == MPCFlag)
  {
    flag_mpc = mpc_msg.controlflag;
    mpc_box[0] = mpc_msg.phi;
    mpc_box[1] = mpc_msg.theta;
    mpc_box[2] = mpc_msg.psi;
    mpc_box[3] = mpc_msg.thrust;
    U_box[0] = mpc_msg.U0;
    U_box[1] = mpc_msg.U1;
    U_box[2] = mpc_msg.U2;
    U_box[3] = mpc_msg.U3;
    U_box[4] = mpc_msg.U4;
    U_box[5] = mpc_msg.U5;
    U_box[6] = mpc_msg.U6;
    U_box[7] = mpc_msg.U7;
    U_box[8] = mpc_msg.U8;
    U_box[9] = mpc_msg.U9;
    U_box[10] = mpc_msg.U10;
    U_box[11] = mpc_msg.U11;
    U_box[12] = mpc_msg.U12;
    U_box[13] = mpc_msg.U13;
    U_box[14] = mpc_msg.U14;
    U_box[15] = mpc_msg.U15;
    U_box[16] = mpc_msg.U16;
    U_box[17] = mpc_msg.U17;
    U_box[18] = mpc_msg.U18;
    U_box[19] = mpc_msg.U19;
    U_box[20] = mpc_msg.U20;
    U_box[21] = mpc_msg.U21;
    U_box[22] = mpc_msg.U22;
    U_box[23] = mpc_msg.U23;
    U_box[24] = mpc_msg.U24;
    U_box[25] = mpc_msg.U25;
    U_box[26] = mpc_msg.U26;
    U_box[27] = mpc_msg.U27;
    U_box[28] = mpc_msg.U28;
    U_box[29] = mpc_msg.U29;
    U_box[30] = mpc_msg.U30;
    U_box[31] = mpc_msg.U31;
    U_box[32] = mpc_msg.U32;
    U_box[33] = mpc_msg.U33;
    U_box[34] = mpc_msg.U34;
    U_box[35] = mpc_msg.U35;
    U_box[36] = mpc_msg.U36;
    U_box[37] = mpc_msg.U37;
    U_box[38] = mpc_msg.U38;
    U_box[39] = mpc_msg.U39;
    U_box[40] = mpc_msg.U40;
    U_box[41] = mpc_msg.U41;
    U_box[42] = mpc_msg.U42;
    U_box[43] = mpc_msg.U43;
    U_box[44] = mpc_msg.U44;
    U_box[45] = mpc_msg.U45;
    U_box[46] = mpc_msg.U46;
    U_box[47] = mpc_msg.U47;
    U_box[48] = mpc_msg.U48;
    U_box[49] = mpc_msg.U49;
    U_box[50] = mpc_msg.U50;
    U_box[51] = mpc_msg.U51;
    U_box[52] = mpc_msg.U52;
    U_box[53] = mpc_msg.U53;
    U_box[54] = mpc_msg.U54;
    U_box[55] = mpc_msg.U55;
    U_box[56] = mpc_msg.U56;
    U_box[57] = mpc_msg.U57;
    U_box[58] = mpc_msg.U58;
    U_box[59] = mpc_msg.U59;
    U_box[60] = mpc_msg.U60;
    U_box[61] = mpc_msg.U61;
    U_box[62] = mpc_msg.U62;
    U_box[63] = mpc_msg.U63;
    U_box[64] = mpc_msg.U64;
    U_box[65] = mpc_msg.U65;
    U_box[66] = mpc_msg.U66;
    U_box[67] = mpc_msg.U67;
    U_box[68] = mpc_msg.U68;
    U_box[69] = mpc_msg.U69;
    U_box[70] = mpc_msg.U70;
    U_box[71] = mpc_msg.U71;
    U_box[72] = mpc_msg.U72;
    U_box[73] = mpc_msg.U73;
    U_box[74] = mpc_msg.U74;
    U_box[75] = mpc_msg.U75;
    U_box[76] = mpc_msg.U76;
    U_box[77] = mpc_msg.U77;
    U_box[78] = mpc_msg.U78;
    U_box[79] = mpc_msg.U79;
    X_ob[0]   = (double)mpc_msg.Xe_ob_x;
    X_ob[1]   = (double)mpc_msg.Xe_ob_vx;
    X_ob[2]   = (double)mpc_msg.Xe_ob_ax;
    X_ob[3]   = (double)mpc_msg.Xe_ob_y;
    X_ob[4]   = (double)mpc_msg.Xe_ob_vy;
    X_ob[5]   = (double)mpc_msg.Xe_ob_ay;
    X_ob[6]   = (double)mpc_msg.Xe_ob_z;
    X_ob[7]   = (double)mpc_msg.Xe_ob_vz;
    X_ob[8]   = (double)mpc_msg.Xe_ob_az;
  }
}

void callback1(const ros::TimerEvent&)
{ 
  if(true == EstimateFlag && true == MPCFlag){
	/*esti: IMU(時間 角速度[x y z] 加速度[x y z]) Mocap(時間 位置[x y z] 速度[x y z] 加速度[x y z] 姿勢[x y z w])
	  mpc : switch 制御入力[x y z T]
	*/

    ofs << esti_box[0] << " " <<  esti_box[1] << " " <<  esti_box[2] << " " <<  esti_box[3] << " " <<  esti_box[4] << " " <<  esti_box[5] << " " <<  esti_box[6] << " " <<  esti_box[7] << " " <<  esti_box[8] << " " <<  esti_box[9] << " " <<  esti_box[10] << " " <<  esti_box[11] << " " <<  esti_box[12] << " " <<  esti_box[13] << " " <<  esti_box[14] << " " <<  esti_box[15] << " " <<  esti_box[16] << " " <<  esti_box[17] << " " <<  esti_box[18] << " " <<  esti_box[19] << " " <<  esti_box[20] << " " << flag_mpc << " " << mpc_box[0] << " " << mpc_box[1] << " " << mpc_box[2] << " " << mpc_box[3];
    for(int i = 0;i < 80;i++)
	ofs << " " << U_box[i];

    for(int i = 0;i < 9;i++)
	ofs << " " << X_ob[i];

	ofs << " " << std::endl;

  }
}

int main(int argc, char **argv)
{
ros::init(argc, argv, "mpc_debug");
  ros::NodeHandle debug;

  EstimateFlag = false;
  MPCFlag = false;
  ros::Subscriber esti_sub = debug.subscribe("crazyflie_data_msg", 1, chatterCallback_estimate);
  ros::Subscriber mpc_sub = debug.subscribe("mpc_data_msg", 1, chatterCallback_mpc_main);
  ros::Timer time1 = debug.createTimer(ros::Duration(0.01), callback1);

  ros::spin();
  return 0;
}
