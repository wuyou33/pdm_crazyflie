// Generated by gencpp from file generate_reference/msgReference.msg
// DO NOT EDIT!


#ifndef GENERATE_REFERENCE_MESSAGE_MSGREFERENCE_H
#define GENERATE_REFERENCE_MESSAGE_MSGREFERENCE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace generate_reference
{
template <class ContainerAllocator>
struct msgReference_
{
  typedef msgReference_<ContainerAllocator> Type;

  msgReference_()
    : signal(0)
    , next_ref_x(0.0)
    , next_ref_y(0.0)
    , next_ref_z(0.0)  {
    }
  msgReference_(const ContainerAllocator& _alloc)
    : signal(0)
    , next_ref_x(0.0)
    , next_ref_y(0.0)
    , next_ref_z(0.0)  {
  (void)_alloc;
    }



   typedef int16_t _signal_type;
  _signal_type signal;

   typedef double _next_ref_x_type;
  _next_ref_x_type next_ref_x;

   typedef double _next_ref_y_type;
  _next_ref_y_type next_ref_y;

   typedef double _next_ref_z_type;
  _next_ref_z_type next_ref_z;




  typedef boost::shared_ptr< ::generate_reference::msgReference_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::generate_reference::msgReference_<ContainerAllocator> const> ConstPtr;

}; // struct msgReference_

typedef ::generate_reference::msgReference_<std::allocator<void> > msgReference;

typedef boost::shared_ptr< ::generate_reference::msgReference > msgReferencePtr;
typedef boost::shared_ptr< ::generate_reference::msgReference const> msgReferenceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::generate_reference::msgReference_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::generate_reference::msgReference_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace generate_reference

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'generate_reference': ['/home/loic_dubois/Documents/pdm_crazyflie/catkin/src/generate_reference/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::generate_reference::msgReference_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::generate_reference::msgReference_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::generate_reference::msgReference_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::generate_reference::msgReference_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::generate_reference::msgReference_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::generate_reference::msgReference_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::generate_reference::msgReference_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1443c667f03adfad10148dcd7f2ec861";
  }

  static const char* value(const ::generate_reference::msgReference_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1443c667f03adfadULL;
  static const uint64_t static_value2 = 0x10148dcd7f2ec861ULL;
};

template<class ContainerAllocator>
struct DataType< ::generate_reference::msgReference_<ContainerAllocator> >
{
  static const char* value()
  {
    return "generate_reference/msgReference";
  }

  static const char* value(const ::generate_reference::msgReference_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::generate_reference::msgReference_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 signal\n\
\n\
float64 next_ref_x\n\
float64 next_ref_y\n\
float64 next_ref_z\n\
";
  }

  static const char* value(const ::generate_reference::msgReference_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::generate_reference::msgReference_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.signal);
      stream.next(m.next_ref_x);
      stream.next(m.next_ref_y);
      stream.next(m.next_ref_z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct msgReference_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::generate_reference::msgReference_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::generate_reference::msgReference_<ContainerAllocator>& v)
  {
    s << indent << "signal: ";
    Printer<int16_t>::stream(s, indent + "  ", v.signal);
    s << indent << "next_ref_x: ";
    Printer<double>::stream(s, indent + "  ", v.next_ref_x);
    s << indent << "next_ref_y: ";
    Printer<double>::stream(s, indent + "  ", v.next_ref_y);
    s << indent << "next_ref_z: ";
    Printer<double>::stream(s, indent + "  ", v.next_ref_z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GENERATE_REFERENCE_MESSAGE_MSGREFERENCE_H
