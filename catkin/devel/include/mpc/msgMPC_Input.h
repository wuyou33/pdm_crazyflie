// Generated by gencpp from file mpc/msgMPC_Input.msg
// DO NOT EDIT!


#ifndef MPC_MESSAGE_MSGMPC_INPUT_H
#define MPC_MESSAGE_MSGMPC_INPUT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mpc
{
template <class ContainerAllocator>
struct msgMPC_Input_
{
  typedef msgMPC_Input_<ContainerAllocator> Type;

  msgMPC_Input_()
    : rollPhi(0.0)
    , thetaPitch(0.0)
    , psiYawRate(0.0)
    , thrust(0.0)
    , controlFlag(0)  {
    }
  msgMPC_Input_(const ContainerAllocator& _alloc)
    : rollPhi(0.0)
    , thetaPitch(0.0)
    , psiYawRate(0.0)
    , thrust(0.0)
    , controlFlag(0)  {
  (void)_alloc;
    }



   typedef double _rollPhi_type;
  _rollPhi_type rollPhi;

   typedef double _thetaPitch_type;
  _thetaPitch_type thetaPitch;

   typedef double _psiYawRate_type;
  _psiYawRate_type psiYawRate;

   typedef double _thrust_type;
  _thrust_type thrust;

   typedef int8_t _controlFlag_type;
  _controlFlag_type controlFlag;




  typedef boost::shared_ptr< ::mpc::msgMPC_Input_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mpc::msgMPC_Input_<ContainerAllocator> const> ConstPtr;

}; // struct msgMPC_Input_

typedef ::mpc::msgMPC_Input_<std::allocator<void> > msgMPC_Input;

typedef boost::shared_ptr< ::mpc::msgMPC_Input > msgMPC_InputPtr;
typedef boost::shared_ptr< ::mpc::msgMPC_Input const> msgMPC_InputConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mpc::msgMPC_Input_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mpc::msgMPC_Input_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mpc

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'mpc': ['/home/loic_dubois/Documents/pdm_crazyflie/catkin/src/mpc/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mpc::msgMPC_Input_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mpc::msgMPC_Input_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mpc::msgMPC_Input_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mpc::msgMPC_Input_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mpc::msgMPC_Input_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mpc::msgMPC_Input_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mpc::msgMPC_Input_<ContainerAllocator> >
{
  static const char* value()
  {
    return "64731ea8c92ca2a1540116905352cf9e";
  }

  static const char* value(const ::mpc::msgMPC_Input_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x64731ea8c92ca2a1ULL;
  static const uint64_t static_value2 = 0x540116905352cf9eULL;
};

template<class ContainerAllocator>
struct DataType< ::mpc::msgMPC_Input_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mpc/msgMPC_Input";
  }

  static const char* value(const ::mpc::msgMPC_Input_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mpc::msgMPC_Input_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 rollPhi\n\
float64 thetaPitch\n\
float64 psiYawRate\n\
float64 thrust\n\
\n\
int8 controlFlag\n\
";
  }

  static const char* value(const ::mpc::msgMPC_Input_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mpc::msgMPC_Input_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.rollPhi);
      stream.next(m.thetaPitch);
      stream.next(m.psiYawRate);
      stream.next(m.thrust);
      stream.next(m.controlFlag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct msgMPC_Input_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mpc::msgMPC_Input_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mpc::msgMPC_Input_<ContainerAllocator>& v)
  {
    s << indent << "rollPhi: ";
    Printer<double>::stream(s, indent + "  ", v.rollPhi);
    s << indent << "thetaPitch: ";
    Printer<double>::stream(s, indent + "  ", v.thetaPitch);
    s << indent << "psiYawRate: ";
    Printer<double>::stream(s, indent + "  ", v.psiYawRate);
    s << indent << "thrust: ";
    Printer<double>::stream(s, indent + "  ", v.thrust);
    s << indent << "controlFlag: ";
    Printer<int8_t>::stream(s, indent + "  ", v.controlFlag);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MPC_MESSAGE_MSGMPC_INPUT_H
